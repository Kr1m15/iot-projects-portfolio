#include <WiFi101.h>
#include <PubSubClient.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include "Adafruit_BME680.h"
#include <Servo.h>
#include <Wire.h>
#include <Adafruit_INA219.h>
Adafruit_INA219 ina219;

//Servo stuff
Servo myservo;  // create servo object to control a servo
int pos = 14;    // variable to store the servo position

const int buttonPin = 4;   // change as per your button attached. 
const int servoPin =  3;   // 
 int x = 1;
int buttonState = 0;         
int oldButtonState = LOW;

//BME stuff
#define SEALEVELPRESSURE_HPA (1010)
#define BME_SCK 9
#define BME_MISO 10
#define BME_MOSI 8
#define BME_CS 7
Adafruit_BME680 bme(BME_CS, BME_MOSI, BME_MISO,  BME_SCK);

//MQTT stuff
#define mqtt_server "192.168.0.91"  // Home Assistant IP address
#define mqtt_user "Krishan"   // Home assistant user name
#define mqtt_password "Kr15hanm"  // Home Assistant password
#define DEVICE_ID "MKR1000_1"    // give a unique name to your device
String temperature_topic;
String pressure_topic;
String humidity_topic;
String gas_topic;
String iaq_topic;
String iaqstatus_topic;
String rssi_topic;
String shuntvoltage_topic;
String busvoltage_topic;
String current_mA_topic;
String loadvoltage_topic;
String power_mW_topic;
const char *mqtt_topic_iaq = "/mkr_text";


//BME measurements
float hum_weighting = 0.25; // so hum effect is 25% of the total air quality score
float gas_weighting = 0.75; // so gas effect is 75% of the total air quality score

int   humidity_score, gas_score;
float gas_reference = 2500;
float hum_reference = 40;
int   getgasreference_count = 0;
int   gas_lower_limit = 10000;  // Bad air quality limit
int   gas_upper_limit = 300000; // Good air quality limit

//LED indicators

int bluepin = 2; // select the pin for the blue LED
int redpin = 1;

//delay
#define READ_DELAY_MS 30000   // 1 mn between reads (in milliseconds)
#define RSSI_DELAY_MS 5000   // 1 mn between reads (in milliseconds)
#define ina219_DELAY_MS 5000   // 1 mn between reads (in milliseconds)

//Wi-Fi stuff
int wifi_ledState = 0;
int mqtt_ledState = 0;
int status = WL_IDLE_STATUS;

WiFiClient espClient;
char ssid[] = "IoT";       //  your wifi SSID
char pass[] = "Kr15hanm";   //  your wifi password
PubSubClient client(espClient);

  float shuntvoltage = 0;
  float busvoltage = 0;
  float current_mA = 0;
  float loadvoltage = 0;
  float power_mW = 0;

void setup() {
  Serial.begin(9600);
  pinMode(redpin, OUTPUT);
  pinMode(bluepin, OUTPUT);

  Serial.println(F("BME680 test"));

    pinMode(buttonPin, INPUT);   
    myservo.attach(3);  // attaches the servo on pin 9 to the servo object
    myservo.write(pos);
      uint32_t currentFrequency;
      !ina219.begin();
        ina219.setCalibration_16V_400mA();

  if (!bme.begin()) {
    Serial.println("Could not find a valid BME680 sensor, check wiring!");
    while (1);
  } else Serial.println("Found a sensor");

  // Set up oversampling and filter initialization
  bme.setTemperatureOversampling(BME680_OS_16X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150); // 320°C for 150 ms
  // Now run the sensor to normalise the readings, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.
  // The sensor takes ~30-mins to fully stabilise
  GetGasReference();

  temperature_topic = String(DEVICE_ID) + "/temperature";
  pressure_topic = String(DEVICE_ID) + "/pressure"; 
  humidity_topic = String(DEVICE_ID) + "/mkr_humidity";
  gas_topic = String(DEVICE_ID) + "/mkr_gas";
  iaq_topic = String(DEVICE_ID) + "/mkr_IAQ";
  iaqstatus_topic = String(DEVICE_ID) + "/mkr_IAQstatus";
  rssi_topic = String(DEVICE_ID) + "/mkr_RSSI";

  shuntvoltage_topic = String(DEVICE_ID) + "/mkr_shuntvoltage";
  busvoltage_topic = String(DEVICE_ID) + "/mkr_busvoltage";
  current_mA_topic = String(DEVICE_ID) + "/mkr_current_mA";
  loadvoltage_topic = String(DEVICE_ID) + "/mkr_loadvoltage";
  power_mW_topic = String(DEVICE_ID) + "/mkr_power_mW";
  //mqtt_topic_iaq = const char *(DEVICE_ID) + "/mkr_mW";

  
  
  setup_wifi();
  client.setServer(mqtt_server, 1883); 
  delay(200);
}

void setup_wifi() { 
  delay(10);
  wifi_ledToggle();
  // We start by connecting to a WiFi network
  while (status != WL_CONNECTED){
    Serial.println("Attempting to connect to WiFi");
    status = WiFi.begin(ssid,pass);
  }
  Serial.println("connected to WiFi ");
  wifi_ledToggle();
}

void reconnect() {
  int mqttFailuresNumber = 0;
  mqtt_ledToggle();
  
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect(DEVICE_ID, mqtt_user, mqtt_password)) {
      Serial.println("connected");
    } else {
      if (mqttFailuresNumber==3) {
        //reset wifi if too many mqtt failures
        mqttFailuresNumber = 0;

        //re-initialize the Wifi connection, whatever happened
        WiFi.end();
        status = WiFi.begin(ssid,pass);
      } else {
        mqttFailuresNumber++;
        Serial.println(mqttFailuresNumber);
      }
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
  mqtt_ledToggle();
}

long lastMsg = 0;
long rssi_lastMsg = 0;
long ina219_lastMsg = 0;

void loop() {

   if (!client.connected()) {
    reconnect();
  }
  client.loop();

   int newButtonState = digitalRead(buttonPin);

  // Has the button gone high since we last read it?
  if (newButtonState == HIGH && oldButtonState == LOW) {

    if (x == 0) {
      // Toggle on
      for (pos = 14; pos <= 78; pos += 2) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15ms for the servo to reach the position
  }
      x = 1;

    } else {
      // Toggle off
      for (pos = 78; pos >= 14; pos -= 2) { // goes from 180 degrees to 0 degrees
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15ms for the servo to reach the position
  }
      x = 0;
    }
  }
  // Store the button's state so we can tell if it's changed next time round
  oldButtonState = newButtonState;

  long ina219_now = millis();

 if (ina219_now - ina219_lastMsg > ina219_DELAY_MS) {
    ina219_lastMsg = ina219_now;

  shuntvoltage = ina219.getShuntVoltage_mV();
  busvoltage = ina219.getBusVoltage_V();
  current_mA = ina219.getCurrent_mA();
  power_mW = ina219.getPower_mW();
  loadvoltage = busvoltage + (shuntvoltage / 1000);

  client.publish(shuntvoltage_topic.c_str(), String(shuntvoltage).c_str(), true);
  client.publish(busvoltage_topic.c_str(), String(busvoltage).c_str(), true);
  client.publish(current_mA_topic.c_str(), String(current_mA).c_str(), true);
  client.publish(loadvoltage_topic.c_str(), String(loadvoltage).c_str(), true);
  client.publish(power_mW_topic.c_str(), String(power_mW).c_str(), true);

 }

  long rssi_now = millis();
 long rssi = WiFi.RSSI();
 if (rssi_now - rssi_lastMsg > RSSI_DELAY_MS) {
    rssi_lastMsg = rssi_now;
 client.publish(rssi_topic.c_str(), String(rssi).c_str(), true);
 }
 
    long now = millis();
  if (now - lastMsg > READ_DELAY_MS) {
   
    lastMsg = now;

    float newTemp = bme.readTemperature() - 5;
    float pres = bme.readPressure() / 100.0F;
    float humid = bme.readHumidity();

  Serial.println("Sensor Readings:");
  Serial.println("  Temperature = " + String(newTemp)     + "°C");
  client.publish(temperature_topic.c_str(), String(newTemp).c_str(), true);
   
  Serial.println("     Pressure = " + String(pres) + " hPa");
  client.publish(pressure_topic.c_str(), String(pres).c_str(), true);
  
  Serial.println("     Humidity = " + String(humid)        + "%");
  client.publish(humidity_topic.c_str(), String(humid).c_str(), true);
  
  Serial.println("          Gas = " + String(gas_reference)               + " ohms\n");
  client.publish(gas_topic.c_str(), String(gas_reference / 100).c_str(), true);
  
  Serial.print("Qualitative Air Quality Index ");

  humidity_score = GetHumidityScore();
  gas_score      = GetGasScore();

  //Combine results for the final IAQ index value (0-100% where 100% is good quality air)
  float air_quality_score = humidity_score + gas_score;
  Serial.println(" comprised of " + String(humidity_score) + "% Humidity and " + String(gas_score) + "% Gas");
  if ((getgasreference_count++) % 5 == 0) GetGasReference();
  Serial.println(CalculateIAQ(air_quality_score));
  Serial.println("--------------------------------------------------------------");
  delay(2000);
}}

void GetGasReference() {
  // Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.
  //Serial.println("Getting a new gas reference value");
  int readings = 10;
  for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
    gas_reference += bme.readGas();
  }
  gas_reference = gas_reference / readings;
  //Serial.println("Gas Reference = "+String(gas_reference,3));
}

String CalculateIAQ(int score) {
  String IAQ_text = "air quality is ";
  score = (100 - score) * 5;
  if      (score >= 351)                  IAQ_text += "Extremely polluted";
  else if (score >= 251 && score <= 350 ) IAQ_text += "Severely polluted";
  else if (score >= 201 && score <= 250 ) IAQ_text += "Heavily Moderately";
  else if (score >= 151 && score <= 200 ) IAQ_text += "Moderately polluted";
  else if (score >= 101 && score <= 150 ) IAQ_text += "Lightly polluted";
  else if (score >=  51 && score <= 100 ) IAQ_text += "Good";
  else if (score >=  00 && score <=  50 ) IAQ_text += "Excellent";
  
  Serial.print("IAQ Score = " + String(score) + ", ");
  client.publish(iaq_topic.c_str(), String(score).c_str(), true);
  
  return IAQ_text;
  //client.publish(iaqstatus_topic.c_str(), "IAQ_text");
//  client.publish(iaqstatus_topic,"IAQ_text");
          client.publish(mqtt_topic_iaq,"open");


}

int GetHumidityScore() {  //Calculate humidity contribution to IAQ index
  float current_humidity = bme.readHumidity();
  if (current_humidity >= 38 && current_humidity <= 42) // Humidity +/-5% around optimum
    humidity_score = 0.25 * 100;
  else
  { // Humidity is sub-optimal
    if (current_humidity < 38)
      humidity_score = 0.25 / hum_reference * current_humidity * 100;
    else
    {
      humidity_score = ((-0.25 / (100 - hum_reference) * current_humidity) + 0.416666) * 100;
    }
  }
  return humidity_score;
}

int GetGasScore() {
  //Calculate gas contribution to IAQ index
  gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference - (gas_lower_limit * (0.75 / (gas_upper_limit - gas_lower_limit)))) * 100.00;
  if (gas_score > 75) gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
  if (gas_score <  0) gas_score = 0;  // Sometimes gas readings can go outside of expected scale minimum
  return gas_score;
}

void wifi_ledToggle(){
  if (wifi_ledState == 0){
    analogWrite(1, 255);
    delay(10);
    wifi_ledState = 1;
  } else {
    analogWrite(1, 0);
    delay(10);
    wifi_ledState = 0;
  }
 }

void mqtt_ledToggle(){
  if (mqtt_ledState == 0){
    analogWrite(2, 255);
    delay(10);
    mqtt_ledState = 1;
  } else {
    analogWrite(2, 0);
    delay(10);
    mqtt_ledState = 0;
  }
 }
