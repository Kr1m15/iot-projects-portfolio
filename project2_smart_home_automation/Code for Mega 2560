#include <Adafruit_Sensor.h>
#include <PubSubClient.h>
#include <Ethernet.h>
#include <RCSwitch.h>
#include <Wire.h>
#include <Adafruit_BMP280.h>
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <IRremote.h>

/*
Pins:
  4 --> SD card
  10 --> w5500
  22 --> rf tx
  23 --> power led
  24 --> IR RX
  26, 27 --> nrf24
  i2c --> bmp280
  A8 --> smoke
  29 --> buzzer
*/
int fan_relay = 25;

const int RECV_PIN = 24;
IRrecv irrecv(RECV_PIN);
decode_results results;

#define garage_status_topic "sensor/garage/smoke-status" 
int buzzer = 29;                        
int smoke_state = LOW; 

RF24 radio(26, 27); // CE, CSN
int dataTransmitted;
const byte address[6] = "00001";

//Network Stuff
IPAddress deviceIp(192, 168, 0, 97);
byte deviceMac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
const char *HA_USER = "Krishan";
const char *HA_PASS = "Kr15hanm";
IPAddress broker(192,168,0,101); // IP address of your MQTT broker eg. 192.168.1.50
#define DEVICE_ID "Mega_1"    // give a unique name to your device

//LEDs
const int switchPin1 = 28;

// Home Assistant Credentials
char const* switchTopic0 = "/house/server_fan/";
char const* switchTopic1 = "/house/Fan/";
char const* switchTopic2 = "/house/Devices/";
char const* switchTopic3 = "/house/AV/";
char const* switchTopic4 = "/house/Monitors/";
char const* switchTopic5 = "/house/Computer/";
char const* switchTopic6 = "/house/LG_TV/";
char const* switchTopic7 = "/house/LG_power/";
char const* switchTopic8 = "/house/LG_normal_screen/";
char const* switchTopic9 = "/house/LG_wide_screen/";
char const* switchTopic10 = "/house/LG_zoom/";
char const* switchTopic11 = "/house/LG_zoom_2/";
char const* switchTopic12 = "/house/LG_just_scan/";
char const* switchTopic13 = "/house/LG_volume_mute_on/";
char const* switchTopic14 = "/house/LG_volume_mute_off/";
char const* switchTopic15 = "/house/LG_volume_up/";
char const* switchTopic16 = "/house/LG_volume_down/";
char const* switchTopic17 = "/house/LG_hdmi_1/";
char const* switchTopic18 = "/house/LG_hdmi_2/";
char const* switchTopic19 = "/house/LG_component_1/";
char const* switchTopic20 = "/house/LG_rgb/";
char const* switchTopic21 = "/house/LG_arrow_up/";
char const* switchTopic22 = "/house/LG_arrow_down/";
char const* switchTopic23 = "/house/LG_arrow_right/";
char const* switchTopic24 = "/house/LG_arrow_left/";
char const* switchTopic25 = "/house/LG_enter/";
char const* switchTopic26 = "/house/LG_menu/";
char const* switchTopic27 = "/house/LG_exit/";
char const* switchTopic28 = "/house/LG_back/";
char const* switchTopic29 = "/house/LG_qmenu/";


//MQTT topics: humidity and temperature
String pressure_topic;
String temperature_topic;

RCSwitch mySwitch = RCSwitch();
EthernetClient  ethClient;
PubSubClient client(ethClient);

Adafruit_BMP280 bmp; // use I2C interface
#define READ_DELAY_MS 30000   // 1 mn between reads (in milliseconds)
long lastMsg = 0;
long ir_lastMsg = 0;

void setup() {
    irrecv.enableIRIn();
    pinMode(fan_relay, OUTPUT);
    pinMode(buzzer, OUTPUT);
    Ethernet.init(10);  // Most Arduino shields
  Serial.begin(9600); // Start serial communication at 115200 baud
  pinMode(4,OUTPUT);
digitalWrite(4,HIGH);
  pinMode(switchPin1, OUTPUT); // Power indicator
  digitalWrite(switchPin1, HIGH);
      !bmp.begin();
      bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,     /* Operating Mode. */
                  Adafruit_BMP280::SAMPLING_X2,     /* Temp. oversampling */
                  Adafruit_BMP280::SAMPLING_X16,    /* Pressure oversampling */
                  Adafruit_BMP280::FILTER_X16,      /* Filtering. */
                  Adafruit_BMP280::STANDBY_MS_500); /* Standby time. */



  delay(100);
pressure_topic = String(DEVICE_ID) + "/pressure";
  temperature_topic = String(DEVICE_ID) + "/temperature";

   // start the Ethernet connection:
  Serial.println("Initialize Ethernet with DHCP:");
  if (Ethernet.begin(deviceMac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    // Check for Ethernet hardware present
    if (Ethernet.hardwareStatus() == EthernetNoHardware) {
      Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
      while (true) {
        delay(1); // do nothing, no point running without Ethernet hardware
      }
    }
    if (Ethernet.linkStatus() == LinkOFF) {
      Serial.println("Ethernet cable is not connected.");
    }}
  
  client.setServer(broker, 1883);
  client.setCallback(callback);// Initialize the callback routine
   Ethernet.begin(deviceMac, deviceIp);
    mySwitch.enableTransmit(22);

      radio.begin();
  radio.openWritingPipe(address);
  radio.setPALevel(RF24_PA_MIN);
  radio.stopListening();
}

// Handle incomming messages from the broker
void callback(char* topic, byte* payload, unsigned int length) {
  String topicStr = topic; 

  Serial.println("Callback update.");
  Serial.print("Topic: ");
  Serial.println(topicStr);
  
   if (topicStr == "/house/Fan/") 
  {
    if(payload[0] == '1'){
       
       mySwitch.send(7412703, 24);
       client.publish("/house/switchConfirmFan/", "1");
       }
       
  else if (payload[0] == '0'){
    mySwitch.send(7412702, 24);
       client.publish("/house/switchConfirmFan/", "0");
  }
}

else if (topicStr == "/house/Devices/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      mySwitch.send(4019855, 24);
       client.publish("/house/switchConfirmDevices/", "1");
       }

      //turn the switch off if the payload is '0' and publish to the MQTT server a confirmation message
     else if (payload[0] == '0'){
      mySwitch.send(4019854, 24);
       client.publish("/house/switchConfirmDevices/", "0");
       }
     }

     else if (topicStr == "/house/AV/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      mySwitch.send(9277439, 24);
       
       client.publish("/house/switchConfirmAV/", "1");
       }

      //turn the switch off if the payload is '0' and publish to the MQTT server a confirmation message
     else if (payload[0] == '0'){
      mySwitch.send(9277438, 24);
       
       client.publish("/house/switchConfirmAV/", "0");
       }
     }
     
     else if (topicStr == "/house/Monitors/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      mySwitch.send(14607759, 24);
       
       client.publish("/house/switchConfirmMonitors/", "1");
       }

      //turn the switch off if the payload is '0' and publish to the MQTT server a confirmation message
     else if (payload[0] == '0'){
      mySwitch.send(14607758, 24);
      
       client.publish("/house/switchConfirmMonitors/", "0");
       }
     }

     else if (topicStr == "/house/Computer/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      mySwitch.send(12171407, 24);
       
       client.publish("/house/switchConfirmComputer/", "1");
       }

      //turn the switch off if the payload is '0' and publish to the MQTT server a confirmation message
     else if (payload[0] == '0'){
      mySwitch.send(12171406, 24);
      
       client.publish("/house/switchConfirmComputer/", "0");
       }
     }

     else if (topicStr == "/house/LG_TV/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      mySwitch.send(2704863, 24);
       
       client.publish("/house/switchConfirmLG_TV/", "1");
       }

      //turn the switch off if the payload is '0' and publish to the MQTT server a confirmation message
     else if (payload[0] == '0'){
      mySwitch.send(2704862, 24);
      
       client.publish("/house/switchConfirmLG_TV/", "0");
       }
     }

     else if (topicStr == "/house/LG_power/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 101;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_power/", "1");
       }

      //turn the switch off if the payload is '0' and publish to the MQTT server a confirmation message
     else if (payload[0] == '0'){
      dataTransmitted = 100;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       client.publish("/house/switchConfirmLG_power/", "0");
       }
     }

     else if (topicStr == "/house/LG_normal_screen/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 102;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_normal_screen/", "1");
       }
     }

     else if (topicStr == "/house/LG_wide_screen/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 103;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_wide_screen/", "1");
       }
     }

     else if (topicStr == "/house/LG_zoom/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 104;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_zoom/", "1");
       }
     }          

     else if (topicStr == "/house/LG_zoom_2/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 105;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_zoom_2/", "1");
       }
     }  

     else if (topicStr == "/house/LG_just_scan/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 106;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_just_scan/", "1");
       }
     } 

     else if (topicStr == "/house/LG_volume_mute_on/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 107;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_volume_mute_on/", "1");
       }
     }      

     else if (topicStr == "/house/LG_volume_mute_off/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 108;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_volume_mute_off/", "1");
       }
     }

     else if (topicStr == "/house/LG_volume_up/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 109;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_volume_up/", "1");
       }
     }

     else if (topicStr == "/house/LG_volume_down/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 110;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_volume_down/", "1");
       }
     }

     else if (topicStr == "/house/LG_hdmi_1/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 111;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_hdmi_1/", "1");
       }
     }

     else if (topicStr == "/house/LG_hdmi_2/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 112;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_hdmi_2/", "1");
       }
     }

     else if (topicStr == "/house/LG_component_1/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 113;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_component_1/", "1");
       }
     }

     else if (topicStr == "/house/LG_rgb/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 114;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_rgb/", "1");
       }
     }

     else if (topicStr == "/house/LG_arrow_up/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 115;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_arrow_up/", "1");
       }
     }

     else if (topicStr == "/house/LG_arrow_down/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 116;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_arrow_down/", "1");
       }
     }

     else if (topicStr == "/house/LG_arrow_right/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 117;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_arrow_right/", "1");
       }
     }

     else if (topicStr == "/house/LG_arrow_left/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 118;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_arrow_left/", "1");
       }
     }

     else if (topicStr == "/house/LG_enter/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 119;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_enter/", "1");
       }
     }

     else if (topicStr == "/house/LG_menu/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 120;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_menu/", "1");
       }
     }

     else if (topicStr == "/house/LG_exit/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 121;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_exit/", "1");
       }
     }

     else if (topicStr == "/house/LG_back/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 122;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_back/", "1");
       }
     }

     else if (topicStr == "/house/LG_qmenu/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      dataTransmitted = 123;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
       
       client.publish("/house/switchConfirmLG_qmenu/", "1");
       }
     }

    else if (topicStr == "/house/server_fan/") 
     {
     //turn the switch on if the payload is '1' and publish to the MQTT server a confirmation message
     if(payload[0] == '1'){
      digitalWrite(fan_relay, HIGH);
       client.publish("/house/switchConfirmServer_fan/", "1");
       }

      //turn the switch off if the payload is '0' and publish to the MQTT server a confirmation message
     else if (payload[0] == '0'){
      digitalWrite(fan_relay, LOW);
       client.publish("/house/switchConfirmServer_fan/", "0");
       }
     }
        
}



// Reconnect to client
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if(client.connect(DEVICE_ID,HA_USER,HA_PASS)) {
      
      Serial.println("connected");
      Serial.print("Subcribed to: ");
       client.subscribe(switchTopic0);
       client.subscribe(switchTopic1);
       client.subscribe(switchTopic2);
       client.subscribe(switchTopic3);
       client.subscribe(switchTopic4);
       client.subscribe(switchTopic5);
       client.subscribe(switchTopic6);
       client.subscribe(switchTopic7);
       client.subscribe(switchTopic8);
       client.subscribe(switchTopic9);
       client.subscribe(switchTopic10);
       client.subscribe(switchTopic11);
       client.subscribe(switchTopic12);
       client.subscribe(switchTopic13);
       client.subscribe(switchTopic14);
       client.subscribe(switchTopic15);
       client.subscribe(switchTopic16);
       client.subscribe(switchTopic17);
       client.subscribe(switchTopic18);
       client.subscribe(switchTopic19);
       client.subscribe(switchTopic20);
       client.subscribe(switchTopic21);
       client.subscribe(switchTopic22);
       client.subscribe(switchTopic23);
       client.subscribe(switchTopic24);
       client.subscribe(switchTopic25);
       client.subscribe(switchTopic26);
       client.subscribe(switchTopic27);
       client.subscribe(switchTopic28);
       client.subscribe(switchTopic29);

    } else {
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
long smoke_lastMsg = 0;
void loop() {
  if (!client.connected())  // Reconnect if connection is lost
  {
    reconnect();
  }
  client.loop();

long now = millis();
  if (now - lastMsg > READ_DELAY_MS) {
   
    lastMsg = now;
 
    float newTemp = bmp.readTemperature();
    float newPressure = bmp.readPressure();

    
      Serial.print("Temperature:");
      Serial.println(String(newTemp ).c_str());
      client.publish(temperature_topic.c_str(), String(newTemp).c_str(), true);
     
      Serial.print("Humidity:");
      Serial.println(String(newPressure / 100.0).c_str());
      client.publish(pressure_topic.c_str(), String(newPressure / 100.0).c_str(), true);
  }
     
  int smoke = analogRead(8);

 // Check the temp, humidity, and door state once per second 
 long smoke_now = millis(); 
 if (smoke_now - smoke_lastMsg > 1000) { 
   smoke_lastMsg = smoke_now; 
   // Read the values from the sensor 

  if (smoke > 47) { 
 unsigned char s;

 for(s=0;s<100;s++)
{
digitalWrite(buzzer,HIGH);

delay(1);//wait for 1ms
}

    if (smoke_state == LOW) {
      Serial.println("smoke");
     client.publish(garage_status_topic, "ON", true); 
   
      smoke_state = HIGH;
    }
  } else {
    digitalWrite(buzzer, LOW);
    if (smoke_state == HIGH){
      Serial.println("smoke ended!");
     client.publish(garage_status_topic, "OFF", true); 
   
      smoke_state = LOW;
    }
  } 
 }

long ir_now = millis();
  if (ir_now - ir_lastMsg > 300) {
   
    ir_lastMsg = ir_now;
     
  if (irrecv.decode(&results)) {
    Serial.println(results.value, HEX);
    irrecv.resume();
  }

  if (results.value == 0x20DF10EF) { //
Serial.println("power");
    results.value = 0x00000000;
      dataTransmitted = 124;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

  if (results.value == 0x20DF40BF) { //
Serial.println("vol high");
    results.value = 0x00000000;
      dataTransmitted = 109;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

  if (results.value == 0x20DFC03F) { //
Serial.println("vol low");
    results.value = 0x00000000;
      dataTransmitted = 110;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

    if (results.value == 0x20DF906F) { //
Serial.println("mute");
    results.value = 0x00000000;
      dataTransmitted = 107;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

  if (results.value == 0x20DF02FD) { //
Serial.println("arrow up");
    results.value = 0x00000000;
      dataTransmitted = 115;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

  if (results.value == 0x20DF827D) { //
Serial.println("arrow down");
    results.value = 0x00000000;
      dataTransmitted = 116;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

  if (results.value == 0x20DF609F) { //
Serial.println("arrow right");
    results.value = 0x00000000;
      dataTransmitted = 117;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

  if (results.value == 0x20DFE01F) { //
Serial.println("arrow left");
    results.value = 0x00000000;
      dataTransmitted = 118;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

  if (results.value == 0x20DF22DD) { //
Serial.println("select");
    results.value = 0x00000000;
      dataTransmitted = 119;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

    if (results.value == 0x20DFDA25) { //
Serial.println("exit");
    results.value = 0x00000000;
      dataTransmitted = 121;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

  if (results.value == 0x20DFC23D) { //
Serial.println("setting ");
    results.value = 0x00000000;
      dataTransmitted = 120;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

  if (results.value == 0x20DF738C) { //
Serial.println("hdmi 1");
    results.value = 0x00000000;
      dataTransmitted = 111;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }


  if (results.value == 0x20DF33CC) { //
Serial.println("hdmi 2");
    results.value = 0x00000000;
      dataTransmitted = 112;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

  if (results.value == 0x20DFAB54) { //
Serial.println("rgb ");
    results.value = 0x00000000;
      dataTransmitted = 114;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

  if (results.value == 0x20DFFD02) { //
Serial.println("comp ");
    results.value = 0x00000000;
      dataTransmitted = 113;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

    if (results.value == 0x20DFA25D) { //
Serial.println("qmenu ");
    results.value = 0x00000000;
      dataTransmitted = 123;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }

    if (results.value == 0x20DF14EB) { //
Serial.println("back ");
    results.value = 0x00000000;
      dataTransmitted = 122;
      radio.write( &dataTransmitted, sizeof(dataTransmitted) );
  }


}
  }
  
